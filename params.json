{"name":"Nest-mod","tagline":"A hardware and software interface to allow Nest Thermostats to operate more efficiently with Modulating/Condensing boilers","body":"# Nest-MOD\r\nNest-MOD is a hardware and software interface to allow Nest Thermostats to work more efficiently with high efficiency\r\nmodulating/condensing boilers and furnaces that incorporate outdoor reset.\r\n\r\n![](https://raw.githubusercontent.com/blbrock/Nest-MOD/master/images/open_close.png)\r\n\r\nRequires python_nest API developed by Jason KÃ¶lker:\r\nhttps://github.com/jkoelker/python-nest/\r\n\r\n# Background\r\nModulating/Condensing (mod/con) boilers with Outdoor Reset (ODR) function are among the most energy \r\nefficient home heating devices available. However, because mod/con boilers operate at lower output \r\ntemperatures than conventional boilers and furnaces, they do not work well with advanced programable \r\nand learning thermostats (e.g. Nest) that offer energy savings by programming nightly temperature \r\nsetbacks or when homes are not occupied. Mod/con boilers with ODR adjust their heat output to compensate \r\nfor outdoor temperatures by dialing back heat ouput during warm weather and increasing output when it is \r\ncold. A properly tuned mod/con ODR boiler will produce just enough heat to compensate for the building's \r\nheat loss and therefore run at lower output for longer output for longer periods of time.\r\n\r\nBecause of their lower operating temperatures, mod/con ODR boilers can take many hours to recover from a \r\ntemperature setback, if they recover at all. This is particularly true for radiant floor heating systems \r\nwhich are great for maintaining temperatures, but respond slowly to thermostat changes. \r\nSome boilers include a boost function that increases boiler output to speed recovery from temperature \r\nsetbacks but many do not. \r\n\r\nUsing temperature setbacks with radiant floor heating, and particularly with mod/con boilers, is a \r\ncontroversial topic. However, a study conducted by the National Renewable Energy Laboratory (NREL) \r\nindicates that nightly temperature setbacks do save energy in radiant floor, mod/con systems even if the \r\nboiler has to work harder to recover from those setbacks (http://www.nrel.gov/docs/fy14osti/60200.pdf).\r\n\r\nMost networked thermostats do not include support for ODR furnaces and boilers. Nest 3rd \r\ngeneration thermostats sold in European markets now provides support for OpenTherm compliant modulating \r\nboilers which allows the thermostat to communicate with the boiler but currently cannot control boiler \r\ntemperature. Based on discussions with Nest support, there doesn't appear to be any plan to implement \r\nmodulating boiler support of any kind in the US. Therefore, one of the main energy saving advantages of \r\nprogramable thermostats is lost on systems that cannot recover from temperature setbacks in a reasonable \r\ntime.\r\n\r\nFrustrated by the lack of support for modulating boilers, I decided to build my own interface shield for \r\na Raspberry pi. The shield and software are designed for a Munchkin boiler but should work (with appropriate \r\nmodifcation) on any boiler that uses a thermistor to control the ODR curve. \r\n\r\n# Features: \r\n\r\nThe software monitors thermostat data and initiates an ODR override cycle when > 1.25F temperature increase \r\nis called by any thermostat. Three stages of boost are provided depending on the differential between room \r\nambient temperature and the target temperature the thermostat is trying to reach. Boost stage (and boiler \r\ntemperature) increases with increasing differentials. Temperature differental threshold for each boost stage \r\ncan be adjusted in the configuration (.secrets) file. Once the differential between target and room temperature \r\nreaches < 0.25F, ODR override is canceled and the boiler returns to its default ODR state.\r\n\r\nThe software tracks all thermostats in a Nest account and adjusts boost stages upward or downward according to \r\nthe maximum boost level being requested by all thermostats in the account.\r\n\r\n# Extras:\r\n\r\n1. boost.py - a simple command line program to provide manual boost if needed. Manual boost cycles are logged (see below).\r\n\r\n2. Automatic dehumidifier adjustment:\r\nThe software contains an optional routine to adjust the humidity setting for a selected thermostat according \r\nto outside temperature. This is useful for controlling an HRV or dehumidifier to maintain optimal indoor\r\nhumidity in cold climates. This feature does not require the pi to function.\r\n\r\n3. Data logging:\r\nData from nest thermostats may optionally be logged to a file by setting options in the .secrets configuration file. \r\nThis produces a comma delimited file containing data from thermostats and boost conditions. his feature does not require the pi to function.\r\n\r\n4. Data Graphing:\r\nIn development, comming soon.\r\n\r\n# Error checking and logging: \r\n\r\nODR override events and communication failures are logged to nest_odr.log. If the device loses connection with\r\nthe Nest server during an ODR override cycle, it will continue to recheck the connection at 1 minute intervals \r\nfor 30 minutes. If a connection is not made within 30 minutes, the ODR override is aborted and the boiler is \r\nreturned to its default state.\r\n\r\n\r\n \r\n \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}